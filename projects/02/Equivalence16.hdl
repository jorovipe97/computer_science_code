// Same as == operator in high level langagues
// ex: 5==5 => true

CHIP Equivalence16 {
	IN
		a[16], b[16];

	OUT
		out;

	PARTS:
	Equivalence(a=a[0], b=b[0], out=iseqbit0);
	Equivalence(a=a[1], b=b[1], out=iseqbit1);
	Equivalence(a=a[2], b=b[2], out=iseqbit2);
	Equivalence(a=a[3], b=b[3], out=iseqbit3);
	Equivalence(a=a[4], b=b[4], out=iseqbit4);
	Equivalence(a=a[5], b=b[5], out=iseqbit5);
	Equivalence(a=a[6], b=b[6], out=iseqbit6);
	Equivalence(a=a[7], b=b[7], out=iseqbit7);
	Equivalence(a=a[8], b=b[8], out=iseqbit8);
	Equivalence(a=a[9], b=b[9], out=iseqbit9);
	Equivalence(a=a[10], b=b[10], out=iseqbit10);
	Equivalence(a=a[11], b=b[11], out=iseqbit11);
	Equivalence(a=a[12], b=b[12], out=iseqbit12);
	Equivalence(a=a[13], b=b[13], out=iseqbit13);
	Equivalence(a=a[14], b=b[14], out=iseqbit14);
	Equivalence(a=a[15], b=b[15], out=iseqbit15);

	And(a=iseqbit0, b=iseqbit1, out=and0);
	And(a=and0, b=iseqbit2, out=and1);
	And(a=and1, b=iseqbit3, out=and2);
	And(a=and2, b=iseqbit4, out=and3);
	And(a=and3, b=iseqbit5, out=and4);
	And(a=and4, b=iseqbit6, out=and5);
	And(a=and5, b=iseqbit7, out=and6);
	And(a=and6, b=iseqbit8, out=and7);
	And(a=and7, b=iseqbit9, out=and8);
	And(a=and8, b=iseqbit10, out=and9);
	And(a=and9, b=iseqbit11, out=and10);
	And(a=and10, b=iseqbit12, out=and11);
	And(a=and11, b=iseqbit13, out=and12);
	And(a=and12, b=iseqbit14, out=and13);
	And(a=and13, b=iseqbit15, out=out);





}