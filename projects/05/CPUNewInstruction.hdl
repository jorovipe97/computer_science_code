// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

 /*
 Vamos a definir un nuevo tipo de instruccion:
 Instrucciones tipo-E:
 E de eraser, este tipo de instrucciones borra (setea a 0) el contenido en un registro determinado
 a continuacion se especifica la sintaxis:

 101 0000000 000 ADC
 a: registro A
 d: registro D
 c: PC register


 */

CHIP CPUNewInstruction {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //i xx a c1c2c3c4c5c6 d1d2d3 j1j2j3

    // Is an E instruction?
    Not(in=instruction[14], out=notinstr14);
    And(a=instruction[15], b=notinstr14, out=ande1);
    And(a=ande1, b=instruction[13], out=isEInstruction);

    // Is an C instruction?
    And(a=instruction[15], b=instruction[14], out=and1);
    And(a=and1, b=instruction[13], out=isCInstruction);

    // Input to A register:
    Mux16(a=instruction, b=aluout, sel=isCInstruction, out=val1); // NOTICE
    Mux16(a[0..15]=val1, b[0..15]=false, sel=canWriteARegister2, out=ainput);
    // not(i)
    Not(in=instruction[15], out=noti);
    
    // Can write on A Register? d1
    Mux(a=false, b=instruction[5], sel=isCInstruction, out=saveOnA);
    Or(a=noti, b=saveOnA, out=canWriteARegister1); //NOTICE, DONE
    And(a=instruction[2], b=isEInstruction, out=canWriteARegister2);
    Or(a=canWriteARegister1, b=canWriteARegister2, out=canWriteARegister);
    ARegister(in=ainput, load=canWriteARegister, out=aOut, out[0..14]=addressM[0..14]);

    // Input Y to ALU
    Mux16(a=aOut, b=inM, sel=instruction[12], out=A-M);

    // Can write on D Register?
    Mux(a=false, b=instruction[4], sel=isCInstruction, out=canWriteDRegister1);
    And(a=isEInstruction, b=instruction[1], out=canWriteDRegister2);
    Or(a=canWriteDRegister1, b=canWriteDRegister2, out=canWriteDRegister);

    // Input to D register
    Mux16(a=aluout, b[0..15]=false, sel=canWriteDRegister2, out=dinput);

    DRegister(in=dinput, load=canWriteDRegister, out=dOut); // NOTICE

    // Si i==1, los c deben entrar a la ALU
    // Si i==0, debe entrar 0 a la ALU
    
    //Mux16(a[6..15]=false, a[5]=true, a[4]=false, a[3]=true, a[2]=false, a[1]=true, a[0]=false, b[6..15]=false, b[0..5]=instruction[6..11], out=computation);

    // @32767
    // 0 111111111111111
    // si i==0, instruction[6..11] no entran en la ALU
    ALU(x=dOut, y=A-M, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=isZero, ng=isNotGreatThanZero, out=outM, out=aluout);
    //ALU(x= ,y= ,zx= ,nx= ,zy= ,ny= ,f= ,no= ,out= ,zr= ,ng= );

    // JJJ Condition (Jump condition)
    Mux(a=false, b=isNotGreatThanZero, sel=instruction[2], out=isNotGreatThanZeroMux);
    Mux(a=false, b=isZero, sel=instruction[1], out=isZeroMux);
    // si isZero == true
    // entonces isZeroMux == true, si instruction[1] == true

    Not(in=isNotGreatThanZero, out=isGreatThanZero);
    Not(in=isZero, out=isNotZero);
    And(a=isNotZero, b=instruction[0], out=instr);
    Mux(a=false, b=isGreatThanZero, sel=instr, out=isGreatThanZeroMux);

    // Instrucciones tipo-c deben chequear que los tres bits mas significativos sean == 1
    Or(a=isZeroMux, b=isNotGreatThanZeroMux, out=isLessOrEqualZero);
    Or(a=isLessOrEqualZero, b=isGreatThanZeroMux, out=JJJCondition);
    And(a=JJJCondition, b=isCInstruction, out=JJJConditionC);

    // 
    And(a=isEInstruction, b=instruction[0], out=resetPCEinstruction);

    Not(in=reset, out=resetNeg);
    Not(in=JJJConditionC, out=condNeg); // NOTICE, if condition is true, no increment
    Or(a=resetNeg, b=condNeg, out=canInc);

    Or(a=resetPCEinstruction, b=reset, out=restartPC);
    PC(in=aOut, reset=restartPC, inc=canInc, load=JJJConditionC, out[0..14]=pc);

    And(a=instruction[3], b=isCInstruction, out=writeM);
    //Mux(a=false, b=instruction[4], sel=instruction[15], out=writeM);

    //CPU line 29 error
}

/*
* M=D
* i xx a cccccc ddd jjj
* 1 11 0 001100 001 000

El aluout debe ser igual a D
La operacion que deberia realizar es: D
y esta realizando M+1
*/

/*
D:JEQ
i xx a cccccc ddd jjj
1 11 0 001100 000 010

if (d==0) { JUMP TO A}
*/