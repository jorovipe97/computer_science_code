// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */


/*
Considere que la implementación de la CPU tiene un error. Dicho error ocurre
al ejecutar la instrucción 0000 0011 0000 0110 que está almacenada en la posición
de memoria 16. Luego de ejecutar la instrucción el programa continúa en la posición
de memoria 32. Indique qué valores podrían tener los registros A, D y PC justo antes
y justo después de ejecutar la instrucción.
*/

/*
0 00 0 001100 000 110
Funcionamiento correcto: @774

Funcionamiento obtenido:
D;JLE

Valores que podria tener A, D y PC antes de ejecutar la instruccion
D igual a 10
A igual a 32
PC igual a 16

Valores despues de ejecutar la instruccion
D igual a 10
A igual a 0
PC igual a 32
*/

/*
El error consiste en interpretar una A instruction como una C instruction, a continuacion codigo ASM que replica el error
// En comentarios de cada instruccion lo que realiza con la CPU erronea
@32
0 00 0 000000 100 000 // Asigna al registro A el valor 32, jump condition igual a null
0000000000100000

D=A // D=32
1 11 0 110000 010 000 // Asigna a D el valor en A, jump condition igual a null
1110110000010000

@774
0 00 0 001100 000 110
0000001100000110
*/

/*
Asigna a A el valor de 774,
como no se valida en el jump condition que la instruccion sea tipo C la CPU procede a
realizar la condicion D;JLE (Jump if D less or equalt than zero) lo cual es falso
para que esto sea true, se hace un swap del cable j1 y j3, es decir donde estab aocnectado
j1 se pone j3 y viceversa, haciendo la condicion true.
Logrando asi que salte a la instruccion 32 cuando solo debia
asignar al registro A el valor ed 774
*/

/*
RESUMEN DE LOS CAMBIES
1. Se quito la comprobacion de intruccion tipo C en la seccion del circuito dedicada a las 
condiciones JJJ

2. Se hizo un swap en la seccion del circuito dedidacada a las condiciones JJJ, con el cable
j1 (instruction[2]) y j3 (instruction[0])
*/

CHIP CPUerror2 {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //i xx a c1c2c3c4c5c6 d1d2d3 j1j2j3

    // Is C instruction?
    And(a=instruction[15], b=instruction[14], out=and1);
    And(a=and1, b=instruction[13], out=isCInstruction);

    // Put your code here:
    Mux16(a=instruction, b=aluout, sel=isCInstruction, out=val); // NOTICE
    // i
    Not(in=isCInstruction, out=noti);
    
    // d1
    Mux(a=false, b=instruction[5], sel=isCInstruction, out=saveOnA);
    Or(a=noti, b=saveOnA, out=canWriteARegister); //NOTICE, DONE
    ARegister(in=val, load=canWriteARegister, out=aOut, out[0..14]=addressM[0..14]);

    // sel=a
    Mux16(a=aOut, b=inM, sel=instruction[12], out=A-M);

    Mux(a=false, b=instruction[4], sel=isCInstruction, out=canWriteDRegister);
    DRegister(in=aluout, load=canWriteDRegister, out=dOut); // NOTICE

    // Si i==1, los c deben entrar a la ALU
    // Si i==0, debe entrar 0 a la ALU
    
    //Mux16(a[6..15]=false, a[5]=true, a[4]=false, a[3]=true, a[2]=false, a[1]=true, a[0]=false, b[6..15]=false, b[0..5]=instruction[6..11], out=computation);

    // @32767
    // 0 111111111111111
    // si i==0, instruction[6..11] no entran en la ALU
    ALU(x=dOut, y=A-M, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=isZero, ng=isNotGreatThanZero, out=outM, out=aluout);
    //ALU(x= ,y= ,zx= ,nx= ,zy= ,ny= ,f= ,no= ,out= ,zr= ,ng= );

    // JJJ Condition (Jump condition)
    Mux(a=false, b=isNotGreatThanZero, sel=instruction[0], out=isNotGreatThanZeroMux);
    Mux(a=false, b=isZero, sel=instruction[1], out=isZeroMux);
    // si isZero == true
    // entonces isZeroMux == true, si instruction[1] == true

    Not(in=isNotGreatThanZero, out=isGreatThanZero);
    Not(in=isZero, out=isNotZero);
    And(a=isNotZero, b=instruction[2], out=instr); // Se swap j3 y j1
    Mux(a=false, b=isGreatThanZero, sel=instr, out=isGreatThanZeroMux);

    // Instrucciones tipo-c deben chequear que los tres bits mas significativos sean == 1
    Or(a=isZeroMux, b=isNotGreatThanZeroMux, out=isLessOrEqualZero);
    Or(a=isLessOrEqualZero, b=isGreatThanZeroMux, out=JJJConditionC);
    //Not(in=foo, out=JJJConditionC);
    //And(a=JJJCondition, b=isCInstruction, out=JJJConditionC);

    Not(in=reset, out=resetNeg);
    Not(in=JJJConditionC, out=condNeg); // NOTICE, if condition is true, no increment
    Or(a=resetNeg, b=condNeg, out=canInc);
    PC(in=aOut, reset=reset, inc=canInc, load=JJJConditionC, out[0..14]=pc);

    And(a=instruction[3], b=isCInstruction, out=writeM);
    //Mux(a=false, b=instruction[4], sel=instruction[15], out=writeM);

    //CPU line 29 error
}


/*
* M=D
* i xx a cccccc ddd jjj
* 1 11 0 001100 001 000

El aluout debe ser igual a D
La operacion que deberia realizar es: D
y esta realizando M+1
*/

/*
D:JEQ
i xx a cccccc ddd jjj
1 11 0 001100 000 010

if (d==0) { JUMP TO A}
*/